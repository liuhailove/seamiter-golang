// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/reflection.proto

package grpc_reflection_v1alpha

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	"go-micro.dev/v4/client"
	"go-micro.dev/v4/server"
	math "math"
)

import (
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ServerReflection service

type ServerReflectionService interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	ServerReflectionInfo(ctx context.Context, opts ...client.CallOption) (ServerReflection_ServerReflectionInfoService, error)
}

type serverReflectionService struct {
	c    client.Client
	name string
}

func NewServerReflectionService(name string, c client.Client) ServerReflectionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "grpc.reflection.v1alpha"
	}
	return &serverReflectionService{
		c:    c,
		name: name,
	}
}

func (c *serverReflectionService) ServerReflectionInfo(ctx context.Context, opts ...client.CallOption) (ServerReflection_ServerReflectionInfoService, error) {
	req := c.c.NewRequest(c.name, "ServerReflection.ServerReflectionInfo", &ServerReflectionRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &serverReflectionServiceServerReflectionInfo{stream}, nil
}

type ServerReflection_ServerReflectionInfoService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerReflectionRequest) error
	Recv() (*ServerReflectionResponse, error)
}

type serverReflectionServiceServerReflectionInfo struct {
	stream client.Stream
}

func (x *serverReflectionServiceServerReflectionInfo) Close() error {
	return x.stream.Close()
}

func (x *serverReflectionServiceServerReflectionInfo) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *serverReflectionServiceServerReflectionInfo) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *serverReflectionServiceServerReflectionInfo) Send(m *ServerReflectionRequest) error {
	return x.stream.Send(m)
}

func (x *serverReflectionServiceServerReflectionInfo) Recv() (*ServerReflectionResponse, error) {
	m := new(ServerReflectionResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ServerReflection service

type ServerReflectionHandler interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	ServerReflectionInfo(context.Context, ServerReflection_ServerReflectionInfoStream) error
}

// RegisterServerReflectionHandler 注册反射服务handler
func RegisterServerReflectionHandler(s server.Server, hdlr ServerReflectionHandler, opts ...server.HandlerOption) error {
	type serverReflection interface {
		ServerReflectionInfo(ctx context.Context, stream server.Stream) error
	}
	type ServerReflection struct {
		serverReflection
	}
	h := &serverReflectionHandler{hdlr}
	return s.Handle(s.NewHandler(&ServerReflection{h}, opts...))
}

// serverReflectionHandler 反射服务handler
type serverReflectionHandler struct {
	ServerReflectionHandler
}

func (h *serverReflectionHandler) ServerReflectionInfo(ctx context.Context, stream server.Stream) error {
	return h.ServerReflectionHandler.ServerReflectionInfo(ctx, &serverReflectionServerReflectionInfoStream{stream})
}

type ServerReflection_ServerReflectionInfoStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerReflectionResponse) error
	Recv() (*ServerReflectionRequest, error)
}

type serverReflectionServerReflectionInfoStream struct {
	stream server.Stream
}

func (x *serverReflectionServerReflectionInfoStream) Close() error {
	return x.stream.Close()
}

func (x *serverReflectionServerReflectionInfoStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *serverReflectionServerReflectionInfoStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *serverReflectionServerReflectionInfoStream) Send(m *ServerReflectionResponse) error {
	return x.stream.Send(m)
}

func (x *serverReflectionServerReflectionInfoStream) Recv() (*ServerReflectionRequest, error) {
	m := new(ServerReflectionRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
